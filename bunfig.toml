# Vector Frankl Bun Configuration
# Documentation: https://bun.sh/docs/runtime/bunfig

# Development server configuration
[serve]
# Default port for the development server
port = 3000
# Entry point for the development server
entrypoint = "src/index.ts"
# Enable hot module replacement for faster development
hmr = true
# Add middleware or plugins for the development server

[serve.middleware]
# Example: path regex and middleware handling
# "*/api/*" = "./middlewares/api-middleware.ts"

# Static file serving configuration
[serve.static]
# Serve static files from these directories
directory = "./public"
# Configure plugins if needed
plugins = ["bun-plugin-tailwind"]

# Build configuration
[build]
# Target environment for builds
target = "bun"
# Output directory for builds
outdir = "dist"
# Entry point for builds
entrypoint = "src/index.ts"
# Minify output for production builds
minify = true
# Source maps for debugging
sourcemap = "linked"

# Bundler configuration
[bundle]
# Entry points for bundling
entrypoints = ["src/index.ts"]
# Output format (esm, cjs, etc.)
format = "esm"
# Enable code-splitting for better chunking and lazy loading
splitting = true
# External dependencies to exclude from bundling
external = []
# Naming pattern for output files
naming = """
{
  "entry": "[dir]/[name].[ext]",
  "chunk": "[name]-[hash].[ext]",
  "asset": "assets/[name]-[hash].[ext]"
}
"""

# Development bundle configuration - inherits from [bundle]
[bundle.development]
# Generate inline source maps for easier debugging
sourcemap = "inline"
# Skip minification for faster builds
minify = false
# Use simpler naming scheme
naming = """
{
  "entry": "[dir]/[name].[ext]",
  "chunk": "[name].[ext]",
  "asset": "assets/[name].[ext]"
}
"""

# Production bundle configuration - inherits from [bundle]
[bundle.production]
# Generate external source maps
sourcemap = "external"
# Enable all minification options with aggressive settings
minify = { syntax = true, whitespace = true, identifiers = true }
# Enable dead code elimination
eliminate_dead_code = true
# Tree shake unused exports
tree_shaking = true

# Runtime configuration
[runtime]
# Allow top-level await
allowTopLevelAwait = true
# Enable watch mode with file extensions to monitor
watch = [".ts", ".tsx", ".js", ".jsx", ".json"]

# Test configuration
[test]
# Run tests in parallel for better performance
parallel = true
# Set timeout for tests (in milliseconds)
timeout = 30000
# Enable coverage by default
coverage = false
# Coverage thresholds
coverageThreshold = { lines = 80, functions = 80, branches = 80 }

# Macro configuration for compile-time optimizations
[macro]
# Define compile-time constants
NODE_ENV = { value = "production", when = "bundle.production" }

# Performance optimizations
[install]
# Use hardlinks when possible for faster installs
linking = "hardlink"
# Cache packages aggressively
cache = true
